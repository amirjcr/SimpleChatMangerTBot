// <auto-generated />
using System;
using ChatMangementApi.Models.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ChatMangementApi.Migrations
{
    [DbContext(typeof(BotDbContext))]
    partial class BotDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ChatMangementApi.Models.Entities.Admin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("ChatMangementApi.Models.Entities.AdminGroup", b =>
                {
                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AdminId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("AdminGroups");
                });

            modelBuilder.Entity("ChatMangementApi.Models.Entities.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("GroupAdded")
                        .HasColumnType("bit");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MemberCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("ChatMangementApi.Models.Entities.LimitedPeople", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Group_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Mute")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("enddate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("stratDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Group_Id");

                    b.ToTable("LimitedPeoples");
                });

            modelBuilder.Entity("ChatMangementApi.Models.Entities.botSetting", b =>
                {
                    b.Property<string>("SettingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Group_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("LockGap")
                        .HasColumnType("bit");

                    b.Property<bool>("LockSticker")
                        .HasColumnType("bit");

                    b.Property<bool>("LockVideo")
                        .HasColumnType("bit");

                    b.Property<bool>("LockVoice")
                        .HasColumnType("bit");

                    b.HasKey("SettingId");

                    b.HasIndex("Group_Id")
                        .IsUnique()
                        .HasFilter("[Group_Id] IS NOT NULL");

                    b.ToTable("BotSettings");
                });

            modelBuilder.Entity("ChatMangementApi.Models.Entities.AdminGroup", b =>
                {
                    b.HasOne("ChatMangementApi.Models.Entities.Admin", "Admin")
                        .WithMany("AdminGroups")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatMangementApi.Models.Entities.Group", "Group")
                        .WithMany("AdminGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ChatMangementApi.Models.Entities.LimitedPeople", b =>
                {
                    b.HasOne("ChatMangementApi.Models.Entities.Group", "Group")
                        .WithMany("LimitedPeople")
                        .HasForeignKey("Group_Id");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ChatMangementApi.Models.Entities.botSetting", b =>
                {
                    b.HasOne("ChatMangementApi.Models.Entities.Group", "Group")
                        .WithOne("BotSetting")
                        .HasForeignKey("ChatMangementApi.Models.Entities.botSetting", "Group_Id");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ChatMangementApi.Models.Entities.Admin", b =>
                {
                    b.Navigation("AdminGroups");
                });

            modelBuilder.Entity("ChatMangementApi.Models.Entities.Group", b =>
                {
                    b.Navigation("AdminGroups");

                    b.Navigation("BotSetting");

                    b.Navigation("LimitedPeople");
                });
#pragma warning restore 612, 618
        }
    }
}
